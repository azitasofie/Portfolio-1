
//Portfolio 1:
//3. Implement classes to represent these vessels


//first off, I am making an abstract class called "Vessels", so I'm able to call this class into specific vessel types
Abstract class Vessels{
  String flagNation;
  int draft;
  int length;
  int width; 
  int cargo; 

//I am using "this" keyword to call the upper String and int's 
  public void Vessels(String flagNation, int draft, int length, int width, int cargo){
    this.flagNation = flagNation; 
    this.draft = draft; 
    this.length = length; 
    this width = width; 
    this.cargo = cargo; 
   }
 
 //Use utilitylevelofCapacity(); method in a way
 
 
 //I am extending the container vessel from abstract class "Vessels". 
 //What is making the container vessel stand out is it's ability to carry a specific number of containers 
 
 Public class Containers extends Vessels {
  int specnumofcontainers;
  double fraction; 
  
  
 //As containers I extend tankers from "Vessels". 
 //The tankers have 1-10 compartments, each with a capacity that can be filled up to a certain level
 
 Public class Tankers extends Vessels {
  int numberofCompartments;
  double fraction
  
 //RoRo vessels also extends "Vessels" abstract class. 
 //The RoRo vessels special quality is that it has a total amount of lane meters and carry cars and trucks. 
 
 int lenghtofacarM = 8:
 int lengthofatruckM = 30;
 int laneMeters:
 double fraction; 
 
 
 public class Main{
    public static void String args[]){
    
      System.out.println("Calculation for containers");
      
      
      
      
      
      
      System.out.println("Calculations for tankers");
      
      
      
      
      
      
      System.out.println("Calculations for RoRo");
 
 
 
    
